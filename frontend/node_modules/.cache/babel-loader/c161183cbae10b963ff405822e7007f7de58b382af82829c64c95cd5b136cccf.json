{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Authentication API\nexport const authAPI = {\n  login: async (username, password) => {\n    try {\n      const response = await api.post('/login', {\n        username,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Login failed'\n      };\n    }\n  },\n  logout: async () => {\n    try {\n      const response = await api.post('/logout');\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Logout failed'\n      };\n    }\n  }\n};\n\n// Employee API\nexport const employeeAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/employees');\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        message: 'Failed to fetch employees'\n      };\n    }\n  },\n  create: async employeeData => {\n    try {\n      const response = await api.post('/employees', employeeData);\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        message: 'Failed to create employee'\n      };\n    }\n  }\n};\n\n// Department API\nexport const departmentAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/departments');\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n        message: 'Failed to fetch departments'\n      };\n    }\n  },\n  create: async departmentData => {\n    try {\n      const response = await api.post('/departments', departmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || {\n        message: 'Failed to create department'\n      };\n    }\n  }\n};\n\n// Salary API\nexport const salaryAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/salaries');\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || {\n        message: 'Failed to fetch salaries'\n      };\n    }\n  },\n  create: async salaryData => {\n    try {\n      const response = await api.post('/salaries', salaryData);\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || {\n        message: 'Failed to create salary record'\n      };\n    }\n  },\n  update: async (id, salaryData) => {\n    try {\n      const response = await api.put(`/salaries/${id}`, salaryData);\n      return response.data;\n    } catch (error) {\n      var _error$response9;\n      throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || {\n        message: 'Failed to update salary record'\n      };\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/salaries/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response0;\n      throw ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data) || {\n        message: 'Failed to delete salary record'\n      };\n    }\n  }\n};\n\n// Employee-Department API\nexport const employeeDepartmentAPI = {\n  assign: async assignmentData => {\n    try {\n      const response = await api.post('/employee-department', assignmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response1;\n      throw ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.data) || {\n        message: 'Failed to assign employee to department'\n      };\n    }\n  }\n};\n\n// Report API\nexport const reportAPI = {\n  getMonthlyReport: async (month, year) => {\n    try {\n      const response = await api.get('/reports/monthly', {\n        params: {\n          month,\n          year\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response10;\n      throw ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || {\n        message: 'Failed to generate report'\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","withCredentials","headers","authAPI","login","username","password","response","post","data","error","_error$response","message","logout","_error$response2","employeeAPI","getAll","get","_error$response3","employeeData","_error$response4","departmentAPI","_error$response5","departmentData","_error$response6","salaryAPI","_error$response7","salaryData","_error$response8","update","id","put","_error$response9","delete","_error$response0","employeeDepartmentAPI","assign","assignmentData","_error$response1","reportAPI","getMonthlyReport","month","year","params","_error$response10"],"sources":["C:/Users/STKIZITOSAVETSS/eprms/frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Authentication API\nexport const authAPI = {\n  login: async (username, password) => {\n    try {\n      const response = await api.post('/login', { username, password });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Login failed' };\n    }\n  },\n\n  logout: async () => {\n    try {\n      const response = await api.post('/logout');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Logout failed' };\n    }\n  },\n};\n\n// Employee API\nexport const employeeAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/employees');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Failed to fetch employees' };\n    }\n  },\n\n  create: async (employeeData) => {\n    try {\n      const response = await api.post('/employees', employeeData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Failed to create employee' };\n    }\n  },\n};\n\n// Department API\nexport const departmentAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/departments');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Failed to fetch departments' };\n    }\n  },\n\n  create: async (departmentData) => {\n    try {\n      const response = await api.post('/departments', departmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Failed to create department' };\n    }\n  },\n};\n\n// Salary API\nexport const salaryAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/salaries');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Failed to fetch salaries' };\n    }\n  },\n\n  create: async (salaryData) => {\n    try {\n      const response = await api.post('/salaries', salaryData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Failed to create salary record' };\n    }\n  },\n\n  update: async (id, salaryData) => {\n    try {\n      const response = await api.put(`/salaries/${id}`, salaryData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Failed to update salary record' };\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/salaries/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Failed to delete salary record' };\n    }\n  },\n};\n\n// Employee-Department API\nexport const employeeDepartmentAPI = {\n  assign: async (assignmentData) => {\n    try {\n      const response = await api.post('/employee-department', assignmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Failed to assign employee to department' };\n    }\n  },\n};\n\n// Report API\nexport const reportAPI = {\n  getMonthlyReport: async (month, year) => {\n    try {\n      const response = await api.get('/reports/monthly', { params: { month, year } });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Failed to generate report' };\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}