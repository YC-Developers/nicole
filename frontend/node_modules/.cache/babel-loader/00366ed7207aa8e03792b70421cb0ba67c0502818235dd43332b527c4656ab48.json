{"ast":null,"code":"// Format currency\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2\n  }).format(amount);\n};\n\n// Format date\nexport const formatDate = dateString => {\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }).format(date);\n};\n\n// Get current month and year\nexport const getCurrentMonthYear = () => {\n  const date = new Date();\n  const month = date.toLocaleString('default', {\n    month: 'long'\n  });\n  const year = date.getFullYear();\n  return {\n    month,\n    year\n  };\n};\n\n// Get all months\nexport const getMonths = () => {\n  return ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n};\n\n// Generate years (for dropdown)\nexport const generateYears = (startYear = 2020, endYear = new Date().getFullYear() + 5) => {\n  const years = [];\n  for (let year = startYear; year <= endYear; year++) {\n    years.push(year);\n  }\n  return years;\n};","map":{"version":3,"names":["formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","format","formatDate","dateString","date","Date","DateTimeFormat","year","month","day","getCurrentMonthYear","toLocaleString","getFullYear","getMonths","generateYears","startYear","endYear","years","push"],"sources":["C:/Users/STKIZITOSAVETSS/eprms/nicole/frontend/src/utils/formatters.js"],"sourcesContent":["// Format currency\nexport const formatCurrency = (amount) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n  }).format(amount);\n};\n\n// Format date\nexport const formatDate = (dateString) => {\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  }).format(date);\n};\n\n// Get current month and year\nexport const getCurrentMonthYear = () => {\n  const date = new Date();\n  const month = date.toLocaleString('default', { month: 'long' });\n  const year = date.getFullYear();\n  \n  return { month, year };\n};\n\n// Get all months\nexport const getMonths = () => {\n  return [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n};\n\n// Generate years (for dropdown)\nexport const generateYears = (startYear = 2020, endYear = new Date().getFullYear() + 5) => {\n  const years = [];\n  for (let year = startYear; year <= endYear; year++) {\n    years.push(year);\n  }\n  return years;\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,cAAc,GAAIC,MAAM,IAAK;EACxC,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACN,MAAM,CAAC;AACnB,CAAC;;AAED;AACA,OAAO,MAAMO,UAAU,GAAIC,UAAU,IAAK;EACxC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAO,IAAIP,IAAI,CAACU,cAAc,CAAC,OAAO,EAAE;IACtCC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE;EACP,CAAC,CAAC,CAACR,MAAM,CAACG,IAAI,CAAC;AACjB,CAAC;;AAED;AACA,OAAO,MAAMM,mBAAmB,GAAGA,CAAA,KAAM;EACvC,MAAMN,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;EACvB,MAAMG,KAAK,GAAGJ,IAAI,CAACO,cAAc,CAAC,SAAS,EAAE;IAAEH,KAAK,EAAE;EAAO,CAAC,CAAC;EAC/D,MAAMD,IAAI,GAAGH,IAAI,CAACQ,WAAW,CAAC,CAAC;EAE/B,OAAO;IAAEJ,KAAK;IAAED;EAAK,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMM,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAO,CACL,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EACtD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CACjE;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,SAAS,GAAG,IAAI,EAAEC,OAAO,GAAG,IAAIX,IAAI,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC,GAAG,CAAC,KAAK;EACzF,MAAMK,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIV,IAAI,GAAGQ,SAAS,EAAER,IAAI,IAAIS,OAAO,EAAET,IAAI,EAAE,EAAE;IAClDU,KAAK,CAACC,IAAI,CAACX,IAAI,CAAC;EAClB;EACA,OAAOU,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}